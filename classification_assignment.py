# -*- coding: utf-8 -*-
"""Classification assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HgqQq6C8oaUkcYWYRqklZMPqpmJXvG2P
"""

import pandas as pd
d = pd.read_csv ('diabetes.csv')
d.head(20)

d.dtypes

#To check null values
print((d['Glucose']==0).sum())
print((d['BloodPressure']==0).sum())
print((d['SkinThickness']==0).sum())
print((d['Insulin']==0).sum())
print((d['BMI']==0).sum())
print((d['DiabetesPedigreeFunction']==0).sum())

d0=d[d['Outcome']==0]
d1=d[d['Outcome']==1]

#Treating null values in the dataset

d0_Gmean=(d0['Glucose']!=0).mean()
d0_Bmean=(d0['BloodPressure']!=0).mean()
d0_Smean=(d0['SkinThickness']!=0).mean()
d0_Imean=(d0['Insulin']!=0).mean()
d0_Bmean=(d0['BMI']!=0).mean()

d1_Gmean=(d1['Glucose']!=0).mean()
d1_Bmean=(d1['BloodPressure']!=0).mean()
d1_Smean=(d1['SkinThickness']!=0).mean()
d1_Imean=(d1['Insulin']!=0).mean()
d1_Bmean=(d1['BMI']!=0).mean()

d0['Glucose']=d0['Glucose'].replace(0,d0_Gmean)
d0['BloodPressure']=d0['BloodPressure'].replace(0,d0_Bmean)
d0['SkinThickness']=d0['SkinThickness'].replace(0,d0_Smean)
d0['Insulin']=d0['Insulin'].replace(0,d0_Imean)
d0['BMI']=d0['BMI'].replace(0,d0_Bmean)

d1['Glucose']=d1['Glucose'].replace(0,d1_Gmean)
d1['BloodPressure']=d1['BloodPressure'].replace(0,d1_Bmean)
d1['SkinThickness']=d1['SkinThickness'].replace(0,d1_Smean)
d1['Insulin']=d1['Insulin'].replace(0,d1_Imean)
d1['BMI']=d1['BMI'].replace(0,d1_Bmean)

d = d0.append(d1).reset_index().drop(['index'],axis=1)
d

# DIFFERENTIATING FEATURES AND LABELS FROM THE DATASET

#Features
X = d.drop(['Outcome'],axis=1)
#Labels
Y = d[['Outcome']]

# Classification algorithm 1: KNN

# Splitting the dataset into training and test set
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(X,Y,test_size=0.3,random_state=42)

from sklearn.neighbors import KNeighborsClassifier
k_model = KNeighborsClassifier(n_neighbors=11)

# Model Fitting
k_model.fit(xtrain,ytrain)

#Checking Testing and Training Accuracy

ytrain_pred = k_model.predict(xtrain)
print(k_model.score(xtrain,ytrain))

print('*********************************************************************')

ytest_pred = k_model.predict(xtest)
print(k_model.score(xtest,ytest))

#Making predicition
print(k_model.predict([[0,170,90,0.5,25,25,0.258,55]]))

# Tuning the value of K

tr_acc = []
ts_acc = []
for i in range(1,15):
  k_model = KNeighborsClassifier(n_neighbors=i)
  k_model.fit(xtrain,ytrain)
  tr_acc.append(k_model.score(xtrain,ytrain))
  ts_acc.append(k_model.score(xtest,ytest))

import matplotlib.pyplot as plt
plt.plot(range(1,15),tr_acc)
plt.plot(range(1,15),ts_acc)
plt.show()

# Classification algorithm 2: DECISION TREES

from sklearn.tree import DecisionTreeClassifier
dmodel = DecisionTreeClassifier()

# Model fitting

dmodel.fit(xtrain,ytrain)

y_pred = dmodel.predict(xtest)
y_pred

#Training accuracy
print(dmodel.score(xtrain,ytrain))
#Testing Accuracy
print(dmodel.score(xtest,ytest))

# Classification algorithm 3: SVM

from sklearn.svm import SVC
smodel = SVC(probability=True)

smodel.fit(xtrain,ytrain)

from sklearn.metrics import accuracy_score,confusion_matrix

# Training and Testing Accuracy
print(accuracy_score(ytrain,smodel.predict(xtrain)))
print(accuracy_score(ytest,smodel.predict(xtest)))

print(confusion_matrix(ytrain,smodel.predict(xtrain)))
print('****************************************************')
print(confusion_matrix(ytest,smodel.predict(xtest)))

# Making prediciton
ypred_train_s = smodel.predict(xtrain)
ypred_train_prob_s = smodel.predict_proba(xtrain)
ypred_test_s = smodel.predict(xtest)
ypred_test_prob_s = smodel.predict_proba(xtest)

# Classification Algorithm 3: Random Forest

from sklearn.ensemble import RandomForestClassifier
rmodel = RandomForestClassifier(n_estimators=21,max_depth=7)

rmodel.fit(xtrain,ytrain)

print(accuracy_score(ytrain,rmodel.predict(xtrain)))
print(accuracy_score(ytest,rmodel.predict(xtest)))

# Classification Algorithm 3: Naive Bayes

from sklearn.naive_bayes import GaussianNB
gmodel= GaussianNB()

gmodel.fit(xtrain,ytrain)

print(accuracy_score(ytrain,gmodel.predict(xtrain)))
print(accuracy_score(ytest,gmodel.predict(xtest)))

# Classification Algorithm 3: Logistic Regression

from sklearn.linear_model import LogisticRegression
lmodel = LogisticRegression()

lmodel.fit(xtrain,ytrain)

print(accuracy_score(ytrain,lmodel.predict(xtrain)))
print(accuracy_score(ytest,lmodel.predict(xtest)))

print(confusion_matrix(ytrain,lmodel.predict(xtrain)))
print('****************************************************')
print(confusion_matrix(ytest,lmodel.predict(xtest)))

ypred_train = lmodel.predict(xtrain)
ypred_train_prob = lmodel.predict_proba(xtrain)
ypred_test = lmodel.predict(xtest)
ypred_test_prob = lmodel.predict_proba(xtest)